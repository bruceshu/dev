// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_comm_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_comm_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fcomm_5fconf_2eproto() {
  delete CommConfReq::default_instance_;
  delete AccesssInfo::default_instance_;
  delete CommConfRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fcomm_5fconf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fcomm_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMECommonProtocol::protobuf_AddDesc_youme_5fcomm_2eproto();
  CommConfReq::default_instance_ = new CommConfReq();
  AccesssInfo::default_instance_ = new AccesssInfo();
  CommConfRsp::default_instance_ = new CommConfRsp();
  CommConfReq::default_instance_->InitAsDefaultInstance();
  AccesssInfo::default_instance_->InitAsDefaultInstance();
  CommConfRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fcomm_5fconf_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fcomm_5fconf_2eproto_once_);
void protobuf_AddDesc_youme_5fcomm_5fconf_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fcomm_5fconf_2eproto_once_,
                 &protobuf_AddDesc_youme_5fcomm_5fconf_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fcomm_5fconf_2eproto {
  StaticDescriptorInitializer_youme_5fcomm_5fconf_2eproto() {
    protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
  }
} static_descriptor_initializer_youme_5fcomm_5fconf_2eproto_;
#endif
bool SERVICE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CommConfReq::kVersionFieldNumber;
const int CommConfReq::kAppkeyFieldNumber;
const int CommConfReq::kVerifyFieldNumber;
const int CommConfReq::kServiceTypeFieldNumber;
const int CommConfReq::kPlatformFieldNumber;
const int CommConfReq::kBrandFieldNumber;
const int CommConfReq::kSysVersionFieldNumber;
const int CommConfReq::kCpuArchFieldNumber;
const int CommConfReq::kCpuChipFieldNumber;
const int CommConfReq::kPkgNameFieldNumber;
const int CommConfReq::kDeviceTokenFieldNumber;
const int CommConfReq::kModelFieldNumber;
const int CommConfReq::kSdkVersionFieldNumber;
const int CommConfReq::kSdkNameFieldNumber;
const int CommConfReq::kStrZoneFieldNumber;
#endif  // !_MSC_VER

CommConfReq::CommConfReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.CommConfReq)
}

void CommConfReq::InitAsDefaultInstance() {
}

CommConfReq::CommConfReq(const CommConfReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.CommConfReq)
}

void CommConfReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  appkey_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  service_type_ = 1;
  platform_ = 0;
  brand_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_version_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_arch_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_chip_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  pkg_name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sdk_version_ = 0;
  sdk_name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  strzone_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommConfReq::~CommConfReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.CommConfReq)
  SharedDtor();
}

void CommConfReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_version_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_arch_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_chip_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  pkg_name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sdk_name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  strzone_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommConfReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommConfReq& CommConfReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
#endif
  return *default_instance_;
}

CommConfReq* CommConfReq::default_instance_ = NULL;

CommConfReq* CommConfReq::New(::youmecommon::protobuf::Arena* arena) const {
  CommConfReq* n = new CommConfReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommConfReq::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    version_ = 0;
    if (has_appkey()) {
      appkey_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_verify()) {
      verify_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    service_type_ = 1;
    platform_ = 0;
    if (has_brand()) {
      brand_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sys_version()) {
      sys_version_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cpu_arch()) {
      cpu_arch_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_cpu_chip()) {
      cpu_chip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pkg_name()) {
      pkg_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device_token()) {
      device_token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sdk_version_ = 0;
    if (has_sdk_name()) {
      sdk_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_strzone()) {
      strzone_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CommConfReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.CommConfReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_appkey;
        break;
      }

      // required string appkey = 2;
      case 2: {
        if (tag == 18) {
         parse_appkey:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_verify;
        break;
      }

      // required bytes verify = 3;
      case 3: {
        if (tag == 26) {
         parse_verify:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_service_type;
        break;
      }

      // required .YOUMEServiceProtocol.SERVICE_TYPE service_type = 4;
      case 4: {
        if (tag == 32) {
         parse_service_type:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::SERVICE_TYPE_IsValid(value)) {
            set_service_type(static_cast< ::YOUMEServiceProtocol::SERVICE_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_platform;
        break;
      }

      // required .YOUMECommonProtocol.DevicePlatform platform = 5;
      case 5: {
        if (tag == 40) {
         parse_platform:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMECommonProtocol::DevicePlatform_IsValid(value)) {
            set_platform(static_cast< ::YOUMECommonProtocol::DevicePlatform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_brand;
        break;
      }

      // required string brand = 6;
      case 6: {
        if (tag == 50) {
         parse_brand:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sys_version;
        break;
      }

      // required string sys_version = 7;
      case 7: {
        if (tag == 58) {
         parse_sys_version:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cpu_arch;
        break;
      }

      // required string cpu_arch = 8;
      case 8: {
        if (tag == 66) {
         parse_cpu_arch:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_arch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cpu_chip;
        break;
      }

      // required string cpu_chip = 9;
      case 9: {
        if (tag == 74) {
         parse_cpu_chip:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_chip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pkg_name;
        break;
      }

      // required string pkg_name = 10;
      case 10: {
        if (tag == 82) {
         parse_pkg_name:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkg_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_device_token;
        break;
      }

      // required string device_token = 11;
      case 11: {
        if (tag == 90) {
         parse_device_token:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_model;
        break;
      }

      // required string model = 12;
      case 12: {
        if (tag == 98) {
         parse_model:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_sdk_version;
        break;
      }

      // required int32 sdk_version = 13;
      case 13: {
        if (tag == 104) {
         parse_sdk_version:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdk_version_)));
          set_has_sdk_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sdk_name;
        break;
      }

      // required string sdk_name = 14;
      case 14: {
        if (tag == 114) {
         parse_sdk_name:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_strZone;
        break;
      }

      // optional string strZone = 15;
      case 15: {
        if (tag == 122) {
         parse_strZone:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strzone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.CommConfReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.CommConfReq)
  return false;
#undef DO_
}

void CommConfReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.CommConfReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string appkey = 2;
  if (has_appkey()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // required bytes verify = 3;
  if (has_verify()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->verify(), output);
  }

  // required .YOUMEServiceProtocol.SERVICE_TYPE service_type = 4;
  if (has_service_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->service_type(), output);
  }

  // required .YOUMECommonProtocol.DevicePlatform platform = 5;
  if (has_platform()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->platform(), output);
  }

  // required string brand = 6;
  if (has_brand()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->brand(), output);
  }

  // required string sys_version = 7;
  if (has_sys_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sys_version(), output);
  }

  // required string cpu_arch = 8;
  if (has_cpu_arch()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cpu_arch(), output);
  }

  // required string cpu_chip = 9;
  if (has_cpu_chip()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->cpu_chip(), output);
  }

  // required string pkg_name = 10;
  if (has_pkg_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pkg_name(), output);
  }

  // required string device_token = 11;
  if (has_device_token()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->device_token(), output);
  }

  // required string model = 12;
  if (has_model()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->model(), output);
  }

  // required int32 sdk_version = 13;
  if (has_sdk_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(13, this->sdk_version(), output);
  }

  // required string sdk_name = 14;
  if (has_sdk_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->sdk_name(), output);
  }

  // optional string strZone = 15;
  if (has_strzone()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->strzone(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.CommConfReq)
}

int CommConfReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_appkey()) {
    // required string appkey = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  if (has_verify()) {
    // required bytes verify = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->verify());
  }

  if (has_service_type()) {
    // required .YOUMEServiceProtocol.SERVICE_TYPE service_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->service_type());
  }

  if (has_platform()) {
    // required .YOUMECommonProtocol.DevicePlatform platform = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->platform());
  }

  if (has_brand()) {
    // required string brand = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->brand());
  }

  if (has_sys_version()) {
    // required string sys_version = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sys_version());
  }

  if (has_cpu_arch()) {
    // required string cpu_arch = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpu_arch());
  }

  if (has_cpu_chip()) {
    // required string cpu_chip = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpu_chip());
  }

  if (has_pkg_name()) {
    // required string pkg_name = 10;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->pkg_name());
  }

  if (has_device_token()) {
    // required string device_token = 11;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  if (has_model()) {
    // required string model = 12;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  if (has_sdk_version()) {
    // required int32 sdk_version = 13;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sdk_version());
  }

  if (has_sdk_name()) {
    // required string sdk_name = 14;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sdk_name());
  }

  return total_size;
}
int CommConfReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required string appkey = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());

    // required bytes verify = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->verify());

    // required .YOUMEServiceProtocol.SERVICE_TYPE service_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->service_type());

    // required .YOUMECommonProtocol.DevicePlatform platform = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->platform());

    // required string brand = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->brand());

    // required string sys_version = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sys_version());

    // required string cpu_arch = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpu_arch());

    // required string cpu_chip = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->cpu_chip());

    // required string pkg_name = 10;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->pkg_name());

    // required string device_token = 11;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());

    // required string model = 12;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->model());

    // required int32 sdk_version = 13;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sdk_version());

    // required string sdk_name = 14;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->sdk_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string strZone = 15;
  if (has_strzone()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->strzone());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommConfReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const CommConfReq*>(&from));
}

void CommConfReq::MergeFrom(const CommConfReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_appkey()) {
      set_has_appkey();
      appkey_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
    }
    if (from.has_verify()) {
      set_has_verify();
      verify_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_);
    }
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_brand()) {
      set_has_brand();
      brand_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
    if (from.has_sys_version()) {
      set_has_sys_version();
      sys_version_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_version_);
    }
    if (from.has_cpu_arch()) {
      set_has_cpu_arch();
      cpu_arch_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_arch_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cpu_chip()) {
      set_has_cpu_chip();
      cpu_chip_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_chip_);
    }
    if (from.has_pkg_name()) {
      set_has_pkg_name();
      pkg_name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkg_name_);
    }
    if (from.has_device_token()) {
      set_has_device_token();
      device_token_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_sdk_version()) {
      set_sdk_version(from.sdk_version());
    }
    if (from.has_sdk_name()) {
      set_has_sdk_name();
      sdk_name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdk_name_);
    }
    if (from.has_strzone()) {
      set_has_strzone();
      strzone_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.strzone_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommConfReq::CopyFrom(const CommConfReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommConfReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void CommConfReq::Swap(CommConfReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommConfReq::InternalSwap(CommConfReq* other) {
  std::swap(version_, other->version_);
  appkey_.Swap(&other->appkey_);
  verify_.Swap(&other->verify_);
  std::swap(service_type_, other->service_type_);
  std::swap(platform_, other->platform_);
  brand_.Swap(&other->brand_);
  sys_version_.Swap(&other->sys_version_);
  cpu_arch_.Swap(&other->cpu_arch_);
  cpu_chip_.Swap(&other->cpu_chip_);
  pkg_name_.Swap(&other->pkg_name_);
  device_token_.Swap(&other->device_token_);
  model_.Swap(&other->model_);
  std::swap(sdk_version_, other->sdk_version_);
  sdk_name_.Swap(&other->sdk_name_);
  strzone_.Swap(&other->strzone_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommConfReq::GetTypeName() const {
  return "YOUMEServiceProtocol.CommConfReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommConfReq

// required int32 version = 1;
bool CommConfReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommConfReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CommConfReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommConfReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 CommConfReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.version)
  return version_;
}
 void CommConfReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.version)
}

// required string appkey = 2;
bool CommConfReq::has_appkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommConfReq::set_has_appkey() {
  _has_bits_[0] |= 0x00000002u;
}
void CommConfReq::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommConfReq::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appkey();
}
 const ::std::string& CommConfReq::appkey() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.appkey)
  return appkey_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_appkey(const ::std::string& value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.appkey)
}
 void CommConfReq::set_appkey(const char* value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.appkey)
}
 void CommConfReq::set_appkey(const char* value, size_t size) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.appkey)
}
 ::std::string* CommConfReq::mutable_appkey() {
  set_has_appkey();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.appkey)
  return appkey_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_appkey() {
  clear_has_appkey();
  return appkey_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    set_has_appkey();
  } else {
    clear_has_appkey();
  }
  appkey_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.appkey)
}

// required bytes verify = 3;
bool CommConfReq::has_verify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommConfReq::set_has_verify() {
  _has_bits_[0] |= 0x00000004u;
}
void CommConfReq::clear_has_verify() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommConfReq::clear_verify() {
  verify_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verify();
}
 const ::std::string& CommConfReq::verify() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.verify)
  return verify_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_verify(const ::std::string& value) {
  set_has_verify();
  verify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.verify)
}
 void CommConfReq::set_verify(const char* value) {
  set_has_verify();
  verify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.verify)
}
 void CommConfReq::set_verify(const void* value, size_t size) {
  set_has_verify();
  verify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.verify)
}
 ::std::string* CommConfReq::mutable_verify() {
  set_has_verify();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.verify)
  return verify_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_verify() {
  clear_has_verify();
  return verify_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_verify(::std::string* verify) {
  if (verify != NULL) {
    set_has_verify();
  } else {
    clear_has_verify();
  }
  verify_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), verify);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.verify)
}

// required .YOUMEServiceProtocol.SERVICE_TYPE service_type = 4;
bool CommConfReq::has_service_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommConfReq::set_has_service_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CommConfReq::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommConfReq::clear_service_type() {
  service_type_ = 1;
  clear_has_service_type();
}
 ::YOUMEServiceProtocol::SERVICE_TYPE CommConfReq::service_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.service_type)
  return static_cast< ::YOUMEServiceProtocol::SERVICE_TYPE >(service_type_);
}
 void CommConfReq::set_service_type(::YOUMEServiceProtocol::SERVICE_TYPE value) {
  assert(::YOUMEServiceProtocol::SERVICE_TYPE_IsValid(value));
  set_has_service_type();
  service_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.service_type)
}

// required .YOUMECommonProtocol.DevicePlatform platform = 5;
bool CommConfReq::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CommConfReq::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
void CommConfReq::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
void CommConfReq::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
 ::YOUMECommonProtocol::DevicePlatform CommConfReq::platform() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.platform)
  return static_cast< ::YOUMECommonProtocol::DevicePlatform >(platform_);
}
 void CommConfReq::set_platform(::YOUMECommonProtocol::DevicePlatform value) {
  assert(::YOUMECommonProtocol::DevicePlatform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.platform)
}

// required string brand = 6;
bool CommConfReq::has_brand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CommConfReq::set_has_brand() {
  _has_bits_[0] |= 0x00000020u;
}
void CommConfReq::clear_has_brand() {
  _has_bits_[0] &= ~0x00000020u;
}
void CommConfReq::clear_brand() {
  brand_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
 const ::std::string& CommConfReq::brand() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.brand)
  return brand_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.brand)
}
 void CommConfReq::set_brand(const char* value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.brand)
}
 void CommConfReq::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.brand)
}
 ::std::string* CommConfReq::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.brand)
  return brand_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_brand() {
  clear_has_brand();
  return brand_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.brand)
}

// required string sys_version = 7;
bool CommConfReq::has_sys_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CommConfReq::set_has_sys_version() {
  _has_bits_[0] |= 0x00000040u;
}
void CommConfReq::clear_has_sys_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void CommConfReq::clear_sys_version() {
  sys_version_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sys_version();
}
 const ::std::string& CommConfReq::sys_version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.sys_version)
  return sys_version_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_sys_version(const ::std::string& value) {
  set_has_sys_version();
  sys_version_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.sys_version)
}
 void CommConfReq::set_sys_version(const char* value) {
  set_has_sys_version();
  sys_version_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.sys_version)
}
 void CommConfReq::set_sys_version(const char* value, size_t size) {
  set_has_sys_version();
  sys_version_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.sys_version)
}
 ::std::string* CommConfReq::mutable_sys_version() {
  set_has_sys_version();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.sys_version)
  return sys_version_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_sys_version() {
  clear_has_sys_version();
  return sys_version_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_sys_version(::std::string* sys_version) {
  if (sys_version != NULL) {
    set_has_sys_version();
  } else {
    clear_has_sys_version();
  }
  sys_version_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sys_version);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.sys_version)
}

// required string cpu_arch = 8;
bool CommConfReq::has_cpu_arch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CommConfReq::set_has_cpu_arch() {
  _has_bits_[0] |= 0x00000080u;
}
void CommConfReq::clear_has_cpu_arch() {
  _has_bits_[0] &= ~0x00000080u;
}
void CommConfReq::clear_cpu_arch() {
  cpu_arch_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_arch();
}
 const ::std::string& CommConfReq::cpu_arch() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.cpu_arch)
  return cpu_arch_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_cpu_arch(const ::std::string& value) {
  set_has_cpu_arch();
  cpu_arch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}
 void CommConfReq::set_cpu_arch(const char* value) {
  set_has_cpu_arch();
  cpu_arch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}
 void CommConfReq::set_cpu_arch(const char* value, size_t size) {
  set_has_cpu_arch();
  cpu_arch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}
 ::std::string* CommConfReq::mutable_cpu_arch() {
  set_has_cpu_arch();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.cpu_arch)
  return cpu_arch_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_cpu_arch() {
  clear_has_cpu_arch();
  return cpu_arch_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_cpu_arch(::std::string* cpu_arch) {
  if (cpu_arch != NULL) {
    set_has_cpu_arch();
  } else {
    clear_has_cpu_arch();
  }
  cpu_arch_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_arch);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}

// required string cpu_chip = 9;
bool CommConfReq::has_cpu_chip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CommConfReq::set_has_cpu_chip() {
  _has_bits_[0] |= 0x00000100u;
}
void CommConfReq::clear_has_cpu_chip() {
  _has_bits_[0] &= ~0x00000100u;
}
void CommConfReq::clear_cpu_chip() {
  cpu_chip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_chip();
}
 const ::std::string& CommConfReq::cpu_chip() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.cpu_chip)
  return cpu_chip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_cpu_chip(const ::std::string& value) {
  set_has_cpu_chip();
  cpu_chip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}
 void CommConfReq::set_cpu_chip(const char* value) {
  set_has_cpu_chip();
  cpu_chip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}
 void CommConfReq::set_cpu_chip(const char* value, size_t size) {
  set_has_cpu_chip();
  cpu_chip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}
 ::std::string* CommConfReq::mutable_cpu_chip() {
  set_has_cpu_chip();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.cpu_chip)
  return cpu_chip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_cpu_chip() {
  clear_has_cpu_chip();
  return cpu_chip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_cpu_chip(::std::string* cpu_chip) {
  if (cpu_chip != NULL) {
    set_has_cpu_chip();
  } else {
    clear_has_cpu_chip();
  }
  cpu_chip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_chip);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}

// required string pkg_name = 10;
bool CommConfReq::has_pkg_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CommConfReq::set_has_pkg_name() {
  _has_bits_[0] |= 0x00000200u;
}
void CommConfReq::clear_has_pkg_name() {
  _has_bits_[0] &= ~0x00000200u;
}
void CommConfReq::clear_pkg_name() {
  pkg_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pkg_name();
}
 const ::std::string& CommConfReq::pkg_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.pkg_name)
  return pkg_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_pkg_name(const ::std::string& value) {
  set_has_pkg_name();
  pkg_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.pkg_name)
}
 void CommConfReq::set_pkg_name(const char* value) {
  set_has_pkg_name();
  pkg_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.pkg_name)
}
 void CommConfReq::set_pkg_name(const char* value, size_t size) {
  set_has_pkg_name();
  pkg_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.pkg_name)
}
 ::std::string* CommConfReq::mutable_pkg_name() {
  set_has_pkg_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.pkg_name)
  return pkg_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_pkg_name() {
  clear_has_pkg_name();
  return pkg_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_pkg_name(::std::string* pkg_name) {
  if (pkg_name != NULL) {
    set_has_pkg_name();
  } else {
    clear_has_pkg_name();
  }
  pkg_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), pkg_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.pkg_name)
}

// required string device_token = 11;
bool CommConfReq::has_device_token() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CommConfReq::set_has_device_token() {
  _has_bits_[0] |= 0x00000400u;
}
void CommConfReq::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000400u;
}
void CommConfReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_token();
}
 const ::std::string& CommConfReq::device_token() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.device_token)
  return device_token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_device_token(const ::std::string& value) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.device_token)
}
 void CommConfReq::set_device_token(const char* value) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.device_token)
}
 void CommConfReq::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.device_token)
}
 ::std::string* CommConfReq::mutable_device_token() {
  set_has_device_token();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.device_token)
  return device_token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_device_token() {
  clear_has_device_token();
  return device_token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    set_has_device_token();
  } else {
    clear_has_device_token();
  }
  device_token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.device_token)
}

// required string model = 12;
bool CommConfReq::has_model() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CommConfReq::set_has_model() {
  _has_bits_[0] |= 0x00000800u;
}
void CommConfReq::clear_has_model() {
  _has_bits_[0] &= ~0x00000800u;
}
void CommConfReq::clear_model() {
  model_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& CommConfReq::model() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.model)
  return model_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.model)
}
 void CommConfReq::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.model)
}
 void CommConfReq::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.model)
}
 ::std::string* CommConfReq::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.model)
  return model_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_model() {
  clear_has_model();
  return model_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.model)
}

// required int32 sdk_version = 13;
bool CommConfReq::has_sdk_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CommConfReq::set_has_sdk_version() {
  _has_bits_[0] |= 0x00001000u;
}
void CommConfReq::clear_has_sdk_version() {
  _has_bits_[0] &= ~0x00001000u;
}
void CommConfReq::clear_sdk_version() {
  sdk_version_ = 0;
  clear_has_sdk_version();
}
 ::youmecommon::protobuf::int32 CommConfReq::sdk_version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.sdk_version)
  return sdk_version_;
}
 void CommConfReq::set_sdk_version(::youmecommon::protobuf::int32 value) {
  set_has_sdk_version();
  sdk_version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.sdk_version)
}

// required string sdk_name = 14;
bool CommConfReq::has_sdk_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CommConfReq::set_has_sdk_name() {
  _has_bits_[0] |= 0x00002000u;
}
void CommConfReq::clear_has_sdk_name() {
  _has_bits_[0] &= ~0x00002000u;
}
void CommConfReq::clear_sdk_name() {
  sdk_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdk_name();
}
 const ::std::string& CommConfReq::sdk_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.sdk_name)
  return sdk_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_sdk_name(const ::std::string& value) {
  set_has_sdk_name();
  sdk_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.sdk_name)
}
 void CommConfReq::set_sdk_name(const char* value) {
  set_has_sdk_name();
  sdk_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.sdk_name)
}
 void CommConfReq::set_sdk_name(const char* value, size_t size) {
  set_has_sdk_name();
  sdk_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.sdk_name)
}
 ::std::string* CommConfReq::mutable_sdk_name() {
  set_has_sdk_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.sdk_name)
  return sdk_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_sdk_name() {
  clear_has_sdk_name();
  return sdk_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_sdk_name(::std::string* sdk_name) {
  if (sdk_name != NULL) {
    set_has_sdk_name();
  } else {
    clear_has_sdk_name();
  }
  sdk_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.sdk_name)
}

// optional string strZone = 15;
bool CommConfReq::has_strzone() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CommConfReq::set_has_strzone() {
  _has_bits_[0] |= 0x00004000u;
}
void CommConfReq::clear_has_strzone() {
  _has_bits_[0] &= ~0x00004000u;
}
void CommConfReq::clear_strzone() {
  strzone_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strzone();
}
 const ::std::string& CommConfReq::strzone() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.strZone)
  return strzone_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_strzone(const ::std::string& value) {
  set_has_strzone();
  strzone_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.strZone)
}
 void CommConfReq::set_strzone(const char* value) {
  set_has_strzone();
  strzone_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.strZone)
}
 void CommConfReq::set_strzone(const char* value, size_t size) {
  set_has_strzone();
  strzone_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.strZone)
}
 ::std::string* CommConfReq::mutable_strzone() {
  set_has_strzone();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.strZone)
  return strzone_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfReq::release_strzone() {
  clear_has_strzone();
  return strzone_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfReq::set_allocated_strzone(::std::string* strzone) {
  if (strzone != NULL) {
    set_has_strzone();
  } else {
    clear_has_strzone();
  }
  strzone_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), strzone);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.strZone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AccesssInfo::kSvrAddrFieldNumber;
const int AccesssInfo::kSvrPortFieldNumber;
#endif  // !_MSC_VER

AccesssInfo::AccesssInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.AccesssInfo)
}

void AccesssInfo::InitAsDefaultInstance() {
}

AccesssInfo::AccesssInfo(const AccesssInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.AccesssInfo)
}

void AccesssInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_addr_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccesssInfo::~AccesssInfo() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.AccesssInfo)
  SharedDtor();
}

void AccesssInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_addr_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AccesssInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AccesssInfo& AccesssInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
#endif
  return *default_instance_;
}

AccesssInfo* AccesssInfo::default_instance_ = NULL;

AccesssInfo* AccesssInfo::New(::youmecommon::protobuf::Arena* arena) const {
  AccesssInfo* n = new AccesssInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccesssInfo::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_svr_addr()) {
      svr_addr_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    svr_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AccesssInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.AccesssInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string svr_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_svr_port;
        break;
      }

      // required uint32 svr_port = 2;
      case 2: {
        if (tag == 16) {
         parse_svr_port:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_port_)));
          set_has_svr_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.AccesssInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.AccesssInfo)
  return false;
#undef DO_
}

void AccesssInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.AccesssInfo)
  // required string svr_addr = 1;
  if (has_svr_addr()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->svr_addr(), output);
  }

  // required uint32 svr_port = 2;
  if (has_svr_port()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.AccesssInfo)
}

int AccesssInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_svr_addr()) {
    // required string svr_addr = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->svr_addr());
  }

  if (has_svr_port()) {
    // required uint32 svr_port = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->svr_port());
  }

  return total_size;
}
int AccesssInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string svr_addr = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->svr_addr());

    // required uint32 svr_port = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->svr_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccesssInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const AccesssInfo*>(&from));
}

void AccesssInfo::MergeFrom(const AccesssInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_addr()) {
      set_has_svr_addr();
      svr_addr_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.svr_addr_);
    }
    if (from.has_svr_port()) {
      set_svr_port(from.svr_port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AccesssInfo::CopyFrom(const AccesssInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccesssInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccesssInfo::Swap(AccesssInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccesssInfo::InternalSwap(AccesssInfo* other) {
  svr_addr_.Swap(&other->svr_addr_);
  std::swap(svr_port_, other->svr_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AccesssInfo::GetTypeName() const {
  return "YOUMEServiceProtocol.AccesssInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccesssInfo

// required string svr_addr = 1;
bool AccesssInfo::has_svr_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccesssInfo::set_has_svr_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void AccesssInfo::clear_has_svr_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccesssInfo::clear_svr_addr() {
  svr_addr_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svr_addr();
}
 const ::std::string& AccesssInfo::svr_addr() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AccesssInfo.svr_addr)
  return svr_addr_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccesssInfo::set_svr_addr(const ::std::string& value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}
 void AccesssInfo::set_svr_addr(const char* value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}
 void AccesssInfo::set_svr_addr(const char* value, size_t size) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}
 ::std::string* AccesssInfo::mutable_svr_addr() {
  set_has_svr_addr();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.AccesssInfo.svr_addr)
  return svr_addr_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccesssInfo::release_svr_addr() {
  clear_has_svr_addr();
  return svr_addr_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccesssInfo::set_allocated_svr_addr(::std::string* svr_addr) {
  if (svr_addr != NULL) {
    set_has_svr_addr();
  } else {
    clear_has_svr_addr();
  }
  svr_addr_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), svr_addr);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}

// required uint32 svr_port = 2;
bool AccesssInfo::has_svr_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccesssInfo::set_has_svr_port() {
  _has_bits_[0] |= 0x00000002u;
}
void AccesssInfo::clear_has_svr_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccesssInfo::clear_svr_port() {
  svr_port_ = 0u;
  clear_has_svr_port();
}
 ::youmecommon::protobuf::uint32 AccesssInfo::svr_port() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AccesssInfo.svr_port)
  return svr_port_;
}
 void AccesssInfo::set_svr_port(::youmecommon::protobuf::uint32 value) {
  set_has_svr_port();
  svr_port_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AccesssInfo.svr_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CommConfRsp::kVersionFieldNumber;
const int CommConfRsp::kRetFieldNumber;
const int CommConfRsp::kSvrTimeFieldNumber;
const int CommConfRsp::kAppidFieldNumber;
const int CommConfRsp::kSvrAddrFieldNumber;
const int CommConfRsp::kSvrPortFieldNumber;
const int CommConfRsp::kConfFieldNumber;
const int CommConfRsp::kSvrListFieldNumber;
#endif  // !_MSC_VER

CommConfRsp::CommConfRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.CommConfRsp)
}

void CommConfRsp::InitAsDefaultInstance() {
}

CommConfRsp::CommConfRsp(const CommConfRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.CommConfRsp)
}

void CommConfRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  svr_time_ = GOOGLE_ULONGLONG(0);
  appid_ = 0;
  svr_addr_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommConfRsp::~CommConfRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.CommConfRsp)
  SharedDtor();
}

void CommConfRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_addr_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommConfRsp& CommConfRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
#endif
  return *default_instance_;
}

CommConfRsp* CommConfRsp::default_instance_ = NULL;

CommConfRsp* CommConfRsp::New(::youmecommon::protobuf::Arena* arena) const {
  CommConfRsp* n = new CommConfRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommConfRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommConfRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(version_, svr_time_);
    ZR_(appid_, svr_port_);
    if (has_svr_addr()) {
      svr_addr_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  conf_.Clear();
  svr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CommConfRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.CommConfRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_svr_time;
        break;
      }

      // required uint64 svr_time = 3;
      case 3: {
        if (tag == 24) {
         parse_svr_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_appid;
        break;
      }

      // required int32 appid = 4;
      case 4: {
        if (tag == 32) {
         parse_appid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_svr_addr;
        break;
      }

      // required string svr_addr = 5;
      case 5: {
        if (tag == 42) {
         parse_svr_addr:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_svr_port;
        break;
      }

      // required int32 svr_port = 6;
      case 6: {
        if (tag == 48) {
         parse_svr_port:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svr_port_)));
          set_has_svr_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_conf;
        break;
      }

      // repeated .YOUMECommonProtocol.NameValue conf = 7;
      case 7: {
        if (tag == 58) {
         parse_conf:
          DO_(input->IncrementRecursionDepth());
         parse_loop_conf:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_conf;
        if (input->ExpectTag(66)) goto parse_loop_svr_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .YOUMEServiceProtocol.AccesssInfo svr_list = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_svr_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_svr_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_svr_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.CommConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.CommConfRsp)
  return false;
#undef DO_
}

void CommConfRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.CommConfRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required uint64 svr_time = 3;
  if (has_svr_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(3, this->svr_time(), output);
  }

  // required int32 appid = 4;
  if (has_appid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->appid(), output);
  }

  // required string svr_addr = 5;
  if (has_svr_addr()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->svr_addr(), output);
  }

  // required int32 svr_port = 6;
  if (has_svr_port()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->svr_port(), output);
  }

  // repeated .YOUMECommonProtocol.NameValue conf = 7;
  for (unsigned int i = 0, n = this->conf_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->conf(i), output);
  }

  // repeated .YOUMEServiceProtocol.AccesssInfo svr_list = 8;
  for (unsigned int i = 0, n = this->svr_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->svr_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.CommConfRsp)
}

int CommConfRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_svr_time()) {
    // required uint64 svr_time = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->svr_time());
  }

  if (has_appid()) {
    // required int32 appid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->appid());
  }

  if (has_svr_addr()) {
    // required string svr_addr = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->svr_addr());
  }

  if (has_svr_port()) {
    // required int32 svr_port = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->svr_port());
  }

  return total_size;
}
int CommConfRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint64 svr_time = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->svr_time());

    // required int32 appid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->appid());

    // required string svr_addr = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->svr_addr());

    // required int32 svr_port = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->svr_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMECommonProtocol.NameValue conf = 7;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  // repeated .YOUMEServiceProtocol.AccesssInfo svr_list = 8;
  total_size += 1 * this->svr_list_size();
  for (int i = 0; i < this->svr_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svr_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommConfRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const CommConfRsp*>(&from));
}

void CommConfRsp::MergeFrom(const CommConfRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  conf_.MergeFrom(from.conf_);
  svr_list_.MergeFrom(from.svr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_svr_addr()) {
      set_has_svr_addr();
      svr_addr_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.svr_addr_);
    }
    if (from.has_svr_port()) {
      set_svr_port(from.svr_port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommConfRsp::CopyFrom(const CommConfRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommConfRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->conf())) return false;
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->svr_list())) return false;
  return true;
}

void CommConfRsp::Swap(CommConfRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommConfRsp::InternalSwap(CommConfRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(svr_time_, other->svr_time_);
  std::swap(appid_, other->appid_);
  svr_addr_.Swap(&other->svr_addr_);
  std::swap(svr_port_, other->svr_port_);
  conf_.UnsafeArenaSwap(&other->conf_);
  svr_list_.UnsafeArenaSwap(&other->svr_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommConfRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.CommConfRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommConfRsp

// required int32 version = 1;
bool CommConfRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommConfRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CommConfRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommConfRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 CommConfRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.version)
  return version_;
}
 void CommConfRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.version)
}

// required int32 ret = 2;
bool CommConfRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommConfRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void CommConfRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommConfRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 CommConfRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.ret)
  return ret_;
}
 void CommConfRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.ret)
}

// required uint64 svr_time = 3;
bool CommConfRsp::has_svr_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommConfRsp::set_has_svr_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CommConfRsp::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommConfRsp::clear_svr_time() {
  svr_time_ = GOOGLE_ULONGLONG(0);
  clear_has_svr_time();
}
 ::youmecommon::protobuf::uint64 CommConfRsp::svr_time() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_time)
  return svr_time_;
}
 void CommConfRsp::set_svr_time(::youmecommon::protobuf::uint64 value) {
  set_has_svr_time();
  svr_time_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.svr_time)
}

// required int32 appid = 4;
bool CommConfRsp::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommConfRsp::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CommConfRsp::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommConfRsp::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
 ::youmecommon::protobuf::int32 CommConfRsp::appid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.appid)
  return appid_;
}
 void CommConfRsp::set_appid(::youmecommon::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.appid)
}

// required string svr_addr = 5;
bool CommConfRsp::has_svr_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CommConfRsp::set_has_svr_addr() {
  _has_bits_[0] |= 0x00000010u;
}
void CommConfRsp::clear_has_svr_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
void CommConfRsp::clear_svr_addr() {
  svr_addr_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svr_addr();
}
 const ::std::string& CommConfRsp::svr_addr() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_addr)
  return svr_addr_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfRsp::set_svr_addr(const ::std::string& value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}
 void CommConfRsp::set_svr_addr(const char* value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}
 void CommConfRsp::set_svr_addr(const char* value, size_t size) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}
 ::std::string* CommConfRsp::mutable_svr_addr() {
  set_has_svr_addr();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfRsp.svr_addr)
  return svr_addr_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommConfRsp::release_svr_addr() {
  clear_has_svr_addr();
  return svr_addr_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommConfRsp::set_allocated_svr_addr(::std::string* svr_addr) {
  if (svr_addr != NULL) {
    set_has_svr_addr();
  } else {
    clear_has_svr_addr();
  }
  svr_addr_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), svr_addr);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}

// required int32 svr_port = 6;
bool CommConfRsp::has_svr_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CommConfRsp::set_has_svr_port() {
  _has_bits_[0] |= 0x00000020u;
}
void CommConfRsp::clear_has_svr_port() {
  _has_bits_[0] &= ~0x00000020u;
}
void CommConfRsp::clear_svr_port() {
  svr_port_ = 0;
  clear_has_svr_port();
}
 ::youmecommon::protobuf::int32 CommConfRsp::svr_port() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_port)
  return svr_port_;
}
 void CommConfRsp::set_svr_port(::youmecommon::protobuf::int32 value) {
  set_has_svr_port();
  svr_port_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.svr_port)
}

// repeated .YOUMECommonProtocol.NameValue conf = 7;
int CommConfRsp::conf_size() const {
  return conf_.size();
}
void CommConfRsp::clear_conf() {
  conf_.Clear();
}
const ::YOUMECommonProtocol::NameValue& CommConfRsp::conf(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_.Get(index);
}
::YOUMECommonProtocol::NameValue* CommConfRsp::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_.Mutable(index);
}
::YOUMECommonProtocol::NameValue* CommConfRsp::add_conf() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >*
CommConfRsp::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.CommConfRsp.conf)
  return &conf_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >&
CommConfRsp::conf() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_;
}

// repeated .YOUMEServiceProtocol.AccesssInfo svr_list = 8;
int CommConfRsp::svr_list_size() const {
  return svr_list_.size();
}
void CommConfRsp::clear_svr_list() {
  svr_list_.Clear();
}
const ::YOUMEServiceProtocol::AccesssInfo& CommConfRsp::svr_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_.Get(index);
}
::YOUMEServiceProtocol::AccesssInfo* CommConfRsp::mutable_svr_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_.Mutable(index);
}
::YOUMEServiceProtocol::AccesssInfo* CommConfRsp::add_svr_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::AccesssInfo >*
CommConfRsp::mutable_svr_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return &svr_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::AccesssInfo >&
CommConfRsp::svr_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
