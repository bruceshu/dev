// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace youmecommon {

void protobuf_ShutdownFile_fec_2eproto() {
  delete commonheadpacket::default_instance_;
  delete commonhead::default_instance_;
  delete fechead::default_instance_;
  delete kcphead::default_instance_;
  delete kcppacket::default_instance_;
  delete fecpacket::default_instance_;
  delete jitterbufferhead::default_instance_;
  delete jitterbufferpacket::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_fec_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_fec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  commonheadpacket::default_instance_ = new commonheadpacket();
  commonhead::default_instance_ = new commonhead();
  fechead::default_instance_ = new fechead();
  kcphead::default_instance_ = new kcphead();
  kcppacket::default_instance_ = new kcppacket();
  fecpacket::default_instance_ = new fecpacket();
  jitterbufferhead::default_instance_ = new jitterbufferhead();
  jitterbufferpacket::default_instance_ = new jitterbufferpacket();
  commonheadpacket::default_instance_->InitAsDefaultInstance();
  commonhead::default_instance_->InitAsDefaultInstance();
  fechead::default_instance_->InitAsDefaultInstance();
  kcphead::default_instance_->InitAsDefaultInstance();
  kcppacket::default_instance_->InitAsDefaultInstance();
  fecpacket::default_instance_->InitAsDefaultInstance();
  jitterbufferhead::default_instance_->InitAsDefaultInstance();
  jitterbufferpacket::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fec_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_fec_2eproto_once_);
void protobuf_AddDesc_fec_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_fec_2eproto_once_,
                 &protobuf_AddDesc_fec_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fec_2eproto {
  StaticDescriptorInitializer_fec_2eproto() {
    protobuf_AddDesc_fec_2eproto();
  }
} static_descriptor_initializer_fec_2eproto_;
#endif
bool packettype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int commonheadpacket::kHeadFieldNumber;
#endif  // !_MSC_VER

commonheadpacket::commonheadpacket()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.commonheadpacket)
}

void commonheadpacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::youmecommon::commonhead*>(
      ::youmecommon::commonhead::internal_default_instance());
#else
  head_ = const_cast< ::youmecommon::commonhead*>(&::youmecommon::commonhead::default_instance());
#endif
}

commonheadpacket::commonheadpacket(const commonheadpacket& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.commonheadpacket)
}

void commonheadpacket::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

commonheadpacket::~commonheadpacket() {
  // @@protoc_insertion_point(destructor:youmecommon.commonheadpacket)
  SharedDtor();
}

void commonheadpacket::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void commonheadpacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const commonheadpacket& commonheadpacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

commonheadpacket* commonheadpacket::default_instance_ = NULL;

commonheadpacket* commonheadpacket::New(::youmecommon::protobuf::Arena* arena) const {
  commonheadpacket* n = new commonheadpacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void commonheadpacket::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::youmecommon::commonhead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool commonheadpacket::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.commonheadpacket)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .youmecommon.commonhead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.commonheadpacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.commonheadpacket)
  return false;
#undef DO_
}

void commonheadpacket::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.commonheadpacket)
  // required .youmecommon.commonhead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.commonheadpacket)
}

int commonheadpacket::ByteSize() const {
  int total_size = 0;

  // required .youmecommon.commonhead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void commonheadpacket::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const commonheadpacket*>(&from));
}

void commonheadpacket::MergeFrom(const commonheadpacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::youmecommon::commonhead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void commonheadpacket::CopyFrom(const commonheadpacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool commonheadpacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void commonheadpacket::Swap(commonheadpacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void commonheadpacket::InternalSwap(commonheadpacket* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string commonheadpacket::GetTypeName() const {
  return "youmecommon.commonheadpacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// commonheadpacket

// required .youmecommon.commonhead head = 1;
bool commonheadpacket::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void commonheadpacket::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void commonheadpacket::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void commonheadpacket::clear_head() {
  if (head_ != NULL) head_->::youmecommon::commonhead::Clear();
  clear_has_head();
}
const ::youmecommon::commonhead& commonheadpacket::head() const {
  // @@protoc_insertion_point(field_get:youmecommon.commonheadpacket.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::youmecommon::commonhead* commonheadpacket::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::youmecommon::commonhead;
  }
  // @@protoc_insertion_point(field_mutable:youmecommon.commonheadpacket.head)
  return head_;
}
::youmecommon::commonhead* commonheadpacket::release_head() {
  clear_has_head();
  ::youmecommon::commonhead* temp = head_;
  head_ = NULL;
  return temp;
}
void commonheadpacket::set_allocated_head(::youmecommon::commonhead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:youmecommon.commonheadpacket.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int commonhead::kIVerFieldNumber;
const int commonhead::kTypeFieldNumber;
#endif  // !_MSC_VER

commonhead::commonhead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.commonhead)
}

void commonhead::InitAsDefaultInstance() {
}

commonhead::commonhead(const commonhead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.commonhead)
}

void commonhead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  iver_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

commonhead::~commonhead() {
  // @@protoc_insertion_point(destructor:youmecommon.commonhead)
  SharedDtor();
}

void commonhead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void commonhead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const commonhead& commonhead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

commonhead* commonhead::default_instance_ = NULL;

commonhead* commonhead::New(::youmecommon::protobuf::Arena* arena) const {
  commonhead* n = new commonhead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void commonhead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<commonhead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(iver_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool commonhead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.commonhead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iver_)));
          set_has_iver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .youmecommon.packettype type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::youmecommon::packettype_IsValid(value)) {
            set_type(static_cast< ::youmecommon::packettype >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.commonhead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.commonhead)
  return false;
#undef DO_
}

void commonhead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.commonhead)
  // required int32 iVer = 1;
  if (has_iver()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->iver(), output);
  }

  // required .youmecommon.packettype type = 2;
  if (has_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.commonhead)
}

int commonhead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_iver()) {
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());
  }

  if (has_type()) {
    // required .youmecommon.packettype type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int commonhead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());

    // required .youmecommon.packettype type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void commonhead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const commonhead*>(&from));
}

void commonhead::MergeFrom(const commonhead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iver()) {
      set_iver(from.iver());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void commonhead::CopyFrom(const commonhead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool commonhead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void commonhead::Swap(commonhead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void commonhead::InternalSwap(commonhead* other) {
  std::swap(iver_, other->iver_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string commonhead::GetTypeName() const {
  return "youmecommon.commonhead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// commonhead

// required int32 iVer = 1;
bool commonhead::has_iver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void commonhead::set_has_iver() {
  _has_bits_[0] |= 0x00000001u;
}
void commonhead::clear_has_iver() {
  _has_bits_[0] &= ~0x00000001u;
}
void commonhead::clear_iver() {
  iver_ = 0;
  clear_has_iver();
}
 ::youmecommon::protobuf::int32 commonhead::iver() const {
  // @@protoc_insertion_point(field_get:youmecommon.commonhead.iVer)
  return iver_;
}
 void commonhead::set_iver(::youmecommon::protobuf::int32 value) {
  set_has_iver();
  iver_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.commonhead.iVer)
}

// required .youmecommon.packettype type = 2;
bool commonhead::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void commonhead::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void commonhead::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void commonhead::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::youmecommon::packettype commonhead::type() const {
  // @@protoc_insertion_point(field_get:youmecommon.commonhead.type)
  return static_cast< ::youmecommon::packettype >(type_);
}
 void commonhead::set_type(::youmecommon::packettype value) {
  assert(::youmecommon::packettype_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.commonhead.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int fechead::kIVerFieldNumber;
const int fechead::kIConvFieldNumber;
const int fechead::kIGroupSerialFieldNumber;
const int fechead::kIGroupItemSerialFieldNumber;
const int fechead::kITypeFieldNumber;
const int fechead::kIKFieldNumber;
const int fechead::kINFieldNumber;
#endif  // !_MSC_VER

fechead::fechead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.fechead)
}

void fechead::InitAsDefaultInstance() {
}

fechead::fechead(const fechead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.fechead)
}

void fechead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  iver_ = 0;
  iconv_ = 0;
  igroupserial_ = 0;
  igroupitemserial_ = 0;
  itype_ = 0;
  ik_ = 0;
  in_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fechead::~fechead() {
  // @@protoc_insertion_point(destructor:youmecommon.fechead)
  SharedDtor();
}

void fechead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void fechead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fechead& fechead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

fechead* fechead::default_instance_ = NULL;

fechead* fechead::New(::youmecommon::protobuf::Arena* arena) const {
  fechead* n = new fechead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fechead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<fechead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(iver_, in_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool fechead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.fechead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iver_)));
          set_has_iver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iConv;
        break;
      }

      // required int32 iConv = 2;
      case 2: {
        if (tag == 16) {
         parse_iConv:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconv_)));
          set_has_iconv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iGroupSerial;
        break;
      }

      // required int32 iGroupSerial = 3;
      case 3: {
        if (tag == 24) {
         parse_iGroupSerial:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igroupserial_)));
          set_has_igroupserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iGroupItemSerial;
        break;
      }

      // required int32 iGroupItemSerial = 4;
      case 4: {
        if (tag == 32) {
         parse_iGroupItemSerial:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igroupitemserial_)));
          set_has_igroupitemserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iType;
        break;
      }

      // required int32 iType = 5;
      case 5: {
        if (tag == 40) {
         parse_iType:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iK;
        break;
      }

      // required int32 iK = 6;
      case 6: {
        if (tag == 48) {
         parse_iK:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ik_)));
          set_has_ik();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_iN;
        break;
      }

      // required int32 iN = 7;
      case 7: {
        if (tag == 56) {
         parse_iN:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_)));
          set_has_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.fechead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.fechead)
  return false;
#undef DO_
}

void fechead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.fechead)
  // required int32 iVer = 1;
  if (has_iver()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->iver(), output);
  }

  // required int32 iConv = 2;
  if (has_iconv()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->iconv(), output);
  }

  // required int32 iGroupSerial = 3;
  if (has_igroupserial()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->igroupserial(), output);
  }

  // required int32 iGroupItemSerial = 4;
  if (has_igroupitemserial()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->igroupitemserial(), output);
  }

  // required int32 iType = 5;
  if (has_itype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->itype(), output);
  }

  // required int32 iK = 6;
  if (has_ik()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->ik(), output);
  }

  // required int32 iN = 7;
  if (has_in()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->in(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.fechead)
}

int fechead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_iver()) {
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());
  }

  if (has_iconv()) {
    // required int32 iConv = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iconv());
  }

  if (has_igroupserial()) {
    // required int32 iGroupSerial = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->igroupserial());
  }

  if (has_igroupitemserial()) {
    // required int32 iGroupItemSerial = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->igroupitemserial());
  }

  if (has_itype()) {
    // required int32 iType = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->itype());
  }

  if (has_ik()) {
    // required int32 iK = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ik());
  }

  if (has_in()) {
    // required int32 iN = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->in());
  }

  return total_size;
}
int fechead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());

    // required int32 iConv = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iconv());

    // required int32 iGroupSerial = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->igroupserial());

    // required int32 iGroupItemSerial = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->igroupitemserial());

    // required int32 iType = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->itype());

    // required int32 iK = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ik());

    // required int32 iN = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->in());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fechead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const fechead*>(&from));
}

void fechead::MergeFrom(const fechead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iver()) {
      set_iver(from.iver());
    }
    if (from.has_iconv()) {
      set_iconv(from.iconv());
    }
    if (from.has_igroupserial()) {
      set_igroupserial(from.igroupserial());
    }
    if (from.has_igroupitemserial()) {
      set_igroupitemserial(from.igroupitemserial());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_ik()) {
      set_ik(from.ik());
    }
    if (from.has_in()) {
      set_in(from.in());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void fechead::CopyFrom(const fechead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fechead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void fechead::Swap(fechead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fechead::InternalSwap(fechead* other) {
  std::swap(iver_, other->iver_);
  std::swap(iconv_, other->iconv_);
  std::swap(igroupserial_, other->igroupserial_);
  std::swap(igroupitemserial_, other->igroupitemserial_);
  std::swap(itype_, other->itype_);
  std::swap(ik_, other->ik_);
  std::swap(in_, other->in_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string fechead::GetTypeName() const {
  return "youmecommon.fechead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fechead

// required int32 iVer = 1;
bool fechead::has_iver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fechead::set_has_iver() {
  _has_bits_[0] |= 0x00000001u;
}
void fechead::clear_has_iver() {
  _has_bits_[0] &= ~0x00000001u;
}
void fechead::clear_iver() {
  iver_ = 0;
  clear_has_iver();
}
 ::youmecommon::protobuf::int32 fechead::iver() const {
  // @@protoc_insertion_point(field_get:youmecommon.fechead.iVer)
  return iver_;
}
 void fechead::set_iver(::youmecommon::protobuf::int32 value) {
  set_has_iver();
  iver_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.fechead.iVer)
}

// required int32 iConv = 2;
bool fechead::has_iconv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fechead::set_has_iconv() {
  _has_bits_[0] |= 0x00000002u;
}
void fechead::clear_has_iconv() {
  _has_bits_[0] &= ~0x00000002u;
}
void fechead::clear_iconv() {
  iconv_ = 0;
  clear_has_iconv();
}
 ::youmecommon::protobuf::int32 fechead::iconv() const {
  // @@protoc_insertion_point(field_get:youmecommon.fechead.iConv)
  return iconv_;
}
 void fechead::set_iconv(::youmecommon::protobuf::int32 value) {
  set_has_iconv();
  iconv_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.fechead.iConv)
}

// required int32 iGroupSerial = 3;
bool fechead::has_igroupserial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fechead::set_has_igroupserial() {
  _has_bits_[0] |= 0x00000004u;
}
void fechead::clear_has_igroupserial() {
  _has_bits_[0] &= ~0x00000004u;
}
void fechead::clear_igroupserial() {
  igroupserial_ = 0;
  clear_has_igroupserial();
}
 ::youmecommon::protobuf::int32 fechead::igroupserial() const {
  // @@protoc_insertion_point(field_get:youmecommon.fechead.iGroupSerial)
  return igroupserial_;
}
 void fechead::set_igroupserial(::youmecommon::protobuf::int32 value) {
  set_has_igroupserial();
  igroupserial_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.fechead.iGroupSerial)
}

// required int32 iGroupItemSerial = 4;
bool fechead::has_igroupitemserial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void fechead::set_has_igroupitemserial() {
  _has_bits_[0] |= 0x00000008u;
}
void fechead::clear_has_igroupitemserial() {
  _has_bits_[0] &= ~0x00000008u;
}
void fechead::clear_igroupitemserial() {
  igroupitemserial_ = 0;
  clear_has_igroupitemserial();
}
 ::youmecommon::protobuf::int32 fechead::igroupitemserial() const {
  // @@protoc_insertion_point(field_get:youmecommon.fechead.iGroupItemSerial)
  return igroupitemserial_;
}
 void fechead::set_igroupitemserial(::youmecommon::protobuf::int32 value) {
  set_has_igroupitemserial();
  igroupitemserial_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.fechead.iGroupItemSerial)
}

// required int32 iType = 5;
bool fechead::has_itype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void fechead::set_has_itype() {
  _has_bits_[0] |= 0x00000010u;
}
void fechead::clear_has_itype() {
  _has_bits_[0] &= ~0x00000010u;
}
void fechead::clear_itype() {
  itype_ = 0;
  clear_has_itype();
}
 ::youmecommon::protobuf::int32 fechead::itype() const {
  // @@protoc_insertion_point(field_get:youmecommon.fechead.iType)
  return itype_;
}
 void fechead::set_itype(::youmecommon::protobuf::int32 value) {
  set_has_itype();
  itype_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.fechead.iType)
}

// required int32 iK = 6;
bool fechead::has_ik() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void fechead::set_has_ik() {
  _has_bits_[0] |= 0x00000020u;
}
void fechead::clear_has_ik() {
  _has_bits_[0] &= ~0x00000020u;
}
void fechead::clear_ik() {
  ik_ = 0;
  clear_has_ik();
}
 ::youmecommon::protobuf::int32 fechead::ik() const {
  // @@protoc_insertion_point(field_get:youmecommon.fechead.iK)
  return ik_;
}
 void fechead::set_ik(::youmecommon::protobuf::int32 value) {
  set_has_ik();
  ik_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.fechead.iK)
}

// required int32 iN = 7;
bool fechead::has_in() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void fechead::set_has_in() {
  _has_bits_[0] |= 0x00000040u;
}
void fechead::clear_has_in() {
  _has_bits_[0] &= ~0x00000040u;
}
void fechead::clear_in() {
  in_ = 0;
  clear_has_in();
}
 ::youmecommon::protobuf::int32 fechead::in() const {
  // @@protoc_insertion_point(field_get:youmecommon.fechead.iN)
  return in_;
}
 void fechead::set_in(::youmecommon::protobuf::int32 value) {
  set_has_in();
  in_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.fechead.iN)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int kcphead::kIVerFieldNumber;
const int kcphead::kIConvFieldNumber;
#endif  // !_MSC_VER

kcphead::kcphead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.kcphead)
}

void kcphead::InitAsDefaultInstance() {
}

kcphead::kcphead(const kcphead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.kcphead)
}

void kcphead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  iver_ = 0;
  iconv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kcphead::~kcphead() {
  // @@protoc_insertion_point(destructor:youmecommon.kcphead)
  SharedDtor();
}

void kcphead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void kcphead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const kcphead& kcphead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

kcphead* kcphead::default_instance_ = NULL;

kcphead* kcphead::New(::youmecommon::protobuf::Arena* arena) const {
  kcphead* n = new kcphead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void kcphead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<kcphead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(iver_, iconv_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool kcphead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.kcphead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iver_)));
          set_has_iver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iConv;
        break;
      }

      // required int32 iConv = 2;
      case 2: {
        if (tag == 16) {
         parse_iConv:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconv_)));
          set_has_iconv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.kcphead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.kcphead)
  return false;
#undef DO_
}

void kcphead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.kcphead)
  // required int32 iVer = 1;
  if (has_iver()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->iver(), output);
  }

  // required int32 iConv = 2;
  if (has_iconv()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->iconv(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.kcphead)
}

int kcphead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_iver()) {
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());
  }

  if (has_iconv()) {
    // required int32 iConv = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iconv());
  }

  return total_size;
}
int kcphead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());

    // required int32 iConv = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iconv());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kcphead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const kcphead*>(&from));
}

void kcphead::MergeFrom(const kcphead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iver()) {
      set_iver(from.iver());
    }
    if (from.has_iconv()) {
      set_iconv(from.iconv());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void kcphead::CopyFrom(const kcphead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kcphead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void kcphead::Swap(kcphead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void kcphead::InternalSwap(kcphead* other) {
  std::swap(iver_, other->iver_);
  std::swap(iconv_, other->iconv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string kcphead::GetTypeName() const {
  return "youmecommon.kcphead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// kcphead

// required int32 iVer = 1;
bool kcphead::has_iver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void kcphead::set_has_iver() {
  _has_bits_[0] |= 0x00000001u;
}
void kcphead::clear_has_iver() {
  _has_bits_[0] &= ~0x00000001u;
}
void kcphead::clear_iver() {
  iver_ = 0;
  clear_has_iver();
}
 ::youmecommon::protobuf::int32 kcphead::iver() const {
  // @@protoc_insertion_point(field_get:youmecommon.kcphead.iVer)
  return iver_;
}
 void kcphead::set_iver(::youmecommon::protobuf::int32 value) {
  set_has_iver();
  iver_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.kcphead.iVer)
}

// required int32 iConv = 2;
bool kcphead::has_iconv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void kcphead::set_has_iconv() {
  _has_bits_[0] |= 0x00000002u;
}
void kcphead::clear_has_iconv() {
  _has_bits_[0] &= ~0x00000002u;
}
void kcphead::clear_iconv() {
  iconv_ = 0;
  clear_has_iconv();
}
 ::youmecommon::protobuf::int32 kcphead::iconv() const {
  // @@protoc_insertion_point(field_get:youmecommon.kcphead.iConv)
  return iconv_;
}
 void kcphead::set_iconv(::youmecommon::protobuf::int32 value) {
  set_has_iconv();
  iconv_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.kcphead.iConv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int kcppacket::kComheadFieldNumber;
const int kcppacket::kHeadFieldNumber;
const int kcppacket::kPayloadFieldNumber;
#endif  // !_MSC_VER

kcppacket::kcppacket()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.kcppacket)
}

void kcppacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comhead_ = const_cast< ::youmecommon::commonhead*>(
      ::youmecommon::commonhead::internal_default_instance());
#else
  comhead_ = const_cast< ::youmecommon::commonhead*>(&::youmecommon::commonhead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::youmecommon::kcphead*>(
      ::youmecommon::kcphead::internal_default_instance());
#else
  head_ = const_cast< ::youmecommon::kcphead*>(&::youmecommon::kcphead::default_instance());
#endif
}

kcppacket::kcppacket(const kcppacket& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.kcppacket)
}

void kcppacket::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  comhead_ = NULL;
  head_ = NULL;
  payload_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kcppacket::~kcppacket() {
  // @@protoc_insertion_point(destructor:youmecommon.kcppacket)
  SharedDtor();
}

void kcppacket::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comhead_;
    delete head_;
  }
}

void kcppacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const kcppacket& kcppacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

kcppacket* kcppacket::default_instance_ = NULL;

kcppacket* kcppacket::New(::youmecommon::protobuf::Arena* arena) const {
  kcppacket* n = new kcppacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void kcppacket::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_comhead()) {
      if (comhead_ != NULL) comhead_->::youmecommon::commonhead::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::youmecommon::kcphead::Clear();
    }
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool kcppacket::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.kcppacket)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .youmecommon.commonhead comhead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comhead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_head;
        break;
      }

      // required .youmecommon.kcphead head = 2;
      case 2: {
        if (tag == 18) {
         parse_head:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // required bytes payload = 3;
      case 3: {
        if (tag == 26) {
         parse_payload:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.kcppacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.kcppacket)
  return false;
#undef DO_
}

void kcppacket::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.kcppacket)
  // required .youmecommon.commonhead comhead = 1;
  if (has_comhead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->comhead_, output);
  }

  // required .youmecommon.kcphead head = 2;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->head_, output);
  }

  // required bytes payload = 3;
  if (has_payload()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.kcppacket)
}

int kcppacket::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_comhead()) {
    // required .youmecommon.commonhead comhead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comhead_);
  }

  if (has_head()) {
    // required .youmecommon.kcphead head = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_payload()) {
    // required bytes payload = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  return total_size;
}
int kcppacket::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .youmecommon.commonhead comhead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comhead_);

    // required .youmecommon.kcphead head = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required bytes payload = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kcppacket::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const kcppacket*>(&from));
}

void kcppacket::MergeFrom(const kcppacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comhead()) {
      mutable_comhead()->::youmecommon::commonhead::MergeFrom(from.comhead());
    }
    if (from.has_head()) {
      mutable_head()->::youmecommon::kcphead::MergeFrom(from.head());
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void kcppacket::CopyFrom(const kcppacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kcppacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_comhead()) {
    if (!this->comhead_->IsInitialized()) return false;
  }
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void kcppacket::Swap(kcppacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void kcppacket::InternalSwap(kcppacket* other) {
  std::swap(comhead_, other->comhead_);
  std::swap(head_, other->head_);
  payload_.Swap(&other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string kcppacket::GetTypeName() const {
  return "youmecommon.kcppacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// kcppacket

// required .youmecommon.commonhead comhead = 1;
bool kcppacket::has_comhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void kcppacket::set_has_comhead() {
  _has_bits_[0] |= 0x00000001u;
}
void kcppacket::clear_has_comhead() {
  _has_bits_[0] &= ~0x00000001u;
}
void kcppacket::clear_comhead() {
  if (comhead_ != NULL) comhead_->::youmecommon::commonhead::Clear();
  clear_has_comhead();
}
const ::youmecommon::commonhead& kcppacket::comhead() const {
  // @@protoc_insertion_point(field_get:youmecommon.kcppacket.comhead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return comhead_ != NULL ? *comhead_ : *default_instance().comhead_;
#else
  return comhead_ != NULL ? *comhead_ : *default_instance_->comhead_;
#endif
}
::youmecommon::commonhead* kcppacket::mutable_comhead() {
  set_has_comhead();
  if (comhead_ == NULL) {
    comhead_ = new ::youmecommon::commonhead;
  }
  // @@protoc_insertion_point(field_mutable:youmecommon.kcppacket.comhead)
  return comhead_;
}
::youmecommon::commonhead* kcppacket::release_comhead() {
  clear_has_comhead();
  ::youmecommon::commonhead* temp = comhead_;
  comhead_ = NULL;
  return temp;
}
void kcppacket::set_allocated_comhead(::youmecommon::commonhead* comhead) {
  delete comhead_;
  comhead_ = comhead;
  if (comhead) {
    set_has_comhead();
  } else {
    clear_has_comhead();
  }
  // @@protoc_insertion_point(field_set_allocated:youmecommon.kcppacket.comhead)
}

// required .youmecommon.kcphead head = 2;
bool kcppacket::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void kcppacket::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
void kcppacket::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
void kcppacket::clear_head() {
  if (head_ != NULL) head_->::youmecommon::kcphead::Clear();
  clear_has_head();
}
const ::youmecommon::kcphead& kcppacket::head() const {
  // @@protoc_insertion_point(field_get:youmecommon.kcppacket.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::youmecommon::kcphead* kcppacket::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::youmecommon::kcphead;
  }
  // @@protoc_insertion_point(field_mutable:youmecommon.kcppacket.head)
  return head_;
}
::youmecommon::kcphead* kcppacket::release_head() {
  clear_has_head();
  ::youmecommon::kcphead* temp = head_;
  head_ = NULL;
  return temp;
}
void kcppacket::set_allocated_head(::youmecommon::kcphead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:youmecommon.kcppacket.head)
}

// required bytes payload = 3;
bool kcppacket::has_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void kcppacket::set_has_payload() {
  _has_bits_[0] |= 0x00000004u;
}
void kcppacket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
void kcppacket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
 const ::std::string& kcppacket::payload() const {
  // @@protoc_insertion_point(field_get:youmecommon.kcppacket.payload)
  return payload_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void kcppacket::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:youmecommon.kcppacket.payload)
}
 void kcppacket::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:youmecommon.kcppacket.payload)
}
 void kcppacket::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:youmecommon.kcppacket.payload)
}
 ::std::string* kcppacket::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:youmecommon.kcppacket.payload)
  return payload_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* kcppacket::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void kcppacket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:youmecommon.kcppacket.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int fecpacket::kComheadFieldNumber;
const int fecpacket::kHeadFieldNumber;
const int fecpacket::kPayloadFieldNumber;
#endif  // !_MSC_VER

fecpacket::fecpacket()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.fecpacket)
}

void fecpacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comhead_ = const_cast< ::youmecommon::commonhead*>(
      ::youmecommon::commonhead::internal_default_instance());
#else
  comhead_ = const_cast< ::youmecommon::commonhead*>(&::youmecommon::commonhead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::youmecommon::fechead*>(
      ::youmecommon::fechead::internal_default_instance());
#else
  head_ = const_cast< ::youmecommon::fechead*>(&::youmecommon::fechead::default_instance());
#endif
}

fecpacket::fecpacket(const fecpacket& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.fecpacket)
}

void fecpacket::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  comhead_ = NULL;
  head_ = NULL;
  payload_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fecpacket::~fecpacket() {
  // @@protoc_insertion_point(destructor:youmecommon.fecpacket)
  SharedDtor();
}

void fecpacket::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comhead_;
    delete head_;
  }
}

void fecpacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const fecpacket& fecpacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

fecpacket* fecpacket::default_instance_ = NULL;

fecpacket* fecpacket::New(::youmecommon::protobuf::Arena* arena) const {
  fecpacket* n = new fecpacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fecpacket::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_comhead()) {
      if (comhead_ != NULL) comhead_->::youmecommon::commonhead::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::youmecommon::fechead::Clear();
    }
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool fecpacket::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.fecpacket)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .youmecommon.commonhead comhead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comhead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_head;
        break;
      }

      // required .youmecommon.fechead head = 2;
      case 2: {
        if (tag == 18) {
         parse_head:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // required bytes payload = 3;
      case 3: {
        if (tag == 26) {
         parse_payload:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.fecpacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.fecpacket)
  return false;
#undef DO_
}

void fecpacket::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.fecpacket)
  // required .youmecommon.commonhead comhead = 1;
  if (has_comhead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->comhead_, output);
  }

  // required .youmecommon.fechead head = 2;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->head_, output);
  }

  // required bytes payload = 3;
  if (has_payload()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.fecpacket)
}

int fecpacket::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_comhead()) {
    // required .youmecommon.commonhead comhead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comhead_);
  }

  if (has_head()) {
    // required .youmecommon.fechead head = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_payload()) {
    // required bytes payload = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  return total_size;
}
int fecpacket::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .youmecommon.commonhead comhead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comhead_);

    // required .youmecommon.fechead head = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required bytes payload = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fecpacket::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const fecpacket*>(&from));
}

void fecpacket::MergeFrom(const fecpacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comhead()) {
      mutable_comhead()->::youmecommon::commonhead::MergeFrom(from.comhead());
    }
    if (from.has_head()) {
      mutable_head()->::youmecommon::fechead::MergeFrom(from.head());
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void fecpacket::CopyFrom(const fecpacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fecpacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_comhead()) {
    if (!this->comhead_->IsInitialized()) return false;
  }
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void fecpacket::Swap(fecpacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fecpacket::InternalSwap(fecpacket* other) {
  std::swap(comhead_, other->comhead_);
  std::swap(head_, other->head_);
  payload_.Swap(&other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string fecpacket::GetTypeName() const {
  return "youmecommon.fecpacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fecpacket

// required .youmecommon.commonhead comhead = 1;
bool fecpacket::has_comhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fecpacket::set_has_comhead() {
  _has_bits_[0] |= 0x00000001u;
}
void fecpacket::clear_has_comhead() {
  _has_bits_[0] &= ~0x00000001u;
}
void fecpacket::clear_comhead() {
  if (comhead_ != NULL) comhead_->::youmecommon::commonhead::Clear();
  clear_has_comhead();
}
const ::youmecommon::commonhead& fecpacket::comhead() const {
  // @@protoc_insertion_point(field_get:youmecommon.fecpacket.comhead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return comhead_ != NULL ? *comhead_ : *default_instance().comhead_;
#else
  return comhead_ != NULL ? *comhead_ : *default_instance_->comhead_;
#endif
}
::youmecommon::commonhead* fecpacket::mutable_comhead() {
  set_has_comhead();
  if (comhead_ == NULL) {
    comhead_ = new ::youmecommon::commonhead;
  }
  // @@protoc_insertion_point(field_mutable:youmecommon.fecpacket.comhead)
  return comhead_;
}
::youmecommon::commonhead* fecpacket::release_comhead() {
  clear_has_comhead();
  ::youmecommon::commonhead* temp = comhead_;
  comhead_ = NULL;
  return temp;
}
void fecpacket::set_allocated_comhead(::youmecommon::commonhead* comhead) {
  delete comhead_;
  comhead_ = comhead;
  if (comhead) {
    set_has_comhead();
  } else {
    clear_has_comhead();
  }
  // @@protoc_insertion_point(field_set_allocated:youmecommon.fecpacket.comhead)
}

// required .youmecommon.fechead head = 2;
bool fecpacket::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fecpacket::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
void fecpacket::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
void fecpacket::clear_head() {
  if (head_ != NULL) head_->::youmecommon::fechead::Clear();
  clear_has_head();
}
const ::youmecommon::fechead& fecpacket::head() const {
  // @@protoc_insertion_point(field_get:youmecommon.fecpacket.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::youmecommon::fechead* fecpacket::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::youmecommon::fechead;
  }
  // @@protoc_insertion_point(field_mutable:youmecommon.fecpacket.head)
  return head_;
}
::youmecommon::fechead* fecpacket::release_head() {
  clear_has_head();
  ::youmecommon::fechead* temp = head_;
  head_ = NULL;
  return temp;
}
void fecpacket::set_allocated_head(::youmecommon::fechead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:youmecommon.fecpacket.head)
}

// required bytes payload = 3;
bool fecpacket::has_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fecpacket::set_has_payload() {
  _has_bits_[0] |= 0x00000004u;
}
void fecpacket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
void fecpacket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
 const ::std::string& fecpacket::payload() const {
  // @@protoc_insertion_point(field_get:youmecommon.fecpacket.payload)
  return payload_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void fecpacket::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:youmecommon.fecpacket.payload)
}
 void fecpacket::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:youmecommon.fecpacket.payload)
}
 void fecpacket::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:youmecommon.fecpacket.payload)
}
 ::std::string* fecpacket::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:youmecommon.fecpacket.payload)
  return payload_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* fecpacket::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void fecpacket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:youmecommon.fecpacket.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int jitterbufferhead::kIVerFieldNumber;
const int jitterbufferhead::kIConvFieldNumber;
const int jitterbufferhead::kIPacketSerialFieldNumber;
#endif  // !_MSC_VER

jitterbufferhead::jitterbufferhead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.jitterbufferhead)
}

void jitterbufferhead::InitAsDefaultInstance() {
}

jitterbufferhead::jitterbufferhead(const jitterbufferhead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.jitterbufferhead)
}

void jitterbufferhead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  iver_ = 0;
  iconv_ = 0;
  ipacketserial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jitterbufferhead::~jitterbufferhead() {
  // @@protoc_insertion_point(destructor:youmecommon.jitterbufferhead)
  SharedDtor();
}

void jitterbufferhead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void jitterbufferhead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const jitterbufferhead& jitterbufferhead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

jitterbufferhead* jitterbufferhead::default_instance_ = NULL;

jitterbufferhead* jitterbufferhead::New(::youmecommon::protobuf::Arena* arena) const {
  jitterbufferhead* n = new jitterbufferhead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void jitterbufferhead::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<jitterbufferhead*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(iver_, ipacketserial_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool jitterbufferhead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.jitterbufferhead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iver_)));
          set_has_iver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iConv;
        break;
      }

      // required int32 iConv = 2;
      case 2: {
        if (tag == 16) {
         parse_iConv:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconv_)));
          set_has_iconv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iPacketSerial;
        break;
      }

      // required int32 iPacketSerial = 3;
      case 3: {
        if (tag == 24) {
         parse_iPacketSerial:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipacketserial_)));
          set_has_ipacketserial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.jitterbufferhead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.jitterbufferhead)
  return false;
#undef DO_
}

void jitterbufferhead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.jitterbufferhead)
  // required int32 iVer = 1;
  if (has_iver()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->iver(), output);
  }

  // required int32 iConv = 2;
  if (has_iconv()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->iconv(), output);
  }

  // required int32 iPacketSerial = 3;
  if (has_ipacketserial()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->ipacketserial(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.jitterbufferhead)
}

int jitterbufferhead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_iver()) {
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());
  }

  if (has_iconv()) {
    // required int32 iConv = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iconv());
  }

  if (has_ipacketserial()) {
    // required int32 iPacketSerial = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ipacketserial());
  }

  return total_size;
}
int jitterbufferhead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 iVer = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iver());

    // required int32 iConv = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->iconv());

    // required int32 iPacketSerial = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ipacketserial());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jitterbufferhead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const jitterbufferhead*>(&from));
}

void jitterbufferhead::MergeFrom(const jitterbufferhead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iver()) {
      set_iver(from.iver());
    }
    if (from.has_iconv()) {
      set_iconv(from.iconv());
    }
    if (from.has_ipacketserial()) {
      set_ipacketserial(from.ipacketserial());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void jitterbufferhead::CopyFrom(const jitterbufferhead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jitterbufferhead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void jitterbufferhead::Swap(jitterbufferhead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void jitterbufferhead::InternalSwap(jitterbufferhead* other) {
  std::swap(iver_, other->iver_);
  std::swap(iconv_, other->iconv_);
  std::swap(ipacketserial_, other->ipacketserial_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string jitterbufferhead::GetTypeName() const {
  return "youmecommon.jitterbufferhead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// jitterbufferhead

// required int32 iVer = 1;
bool jitterbufferhead::has_iver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void jitterbufferhead::set_has_iver() {
  _has_bits_[0] |= 0x00000001u;
}
void jitterbufferhead::clear_has_iver() {
  _has_bits_[0] &= ~0x00000001u;
}
void jitterbufferhead::clear_iver() {
  iver_ = 0;
  clear_has_iver();
}
 ::youmecommon::protobuf::int32 jitterbufferhead::iver() const {
  // @@protoc_insertion_point(field_get:youmecommon.jitterbufferhead.iVer)
  return iver_;
}
 void jitterbufferhead::set_iver(::youmecommon::protobuf::int32 value) {
  set_has_iver();
  iver_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.jitterbufferhead.iVer)
}

// required int32 iConv = 2;
bool jitterbufferhead::has_iconv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void jitterbufferhead::set_has_iconv() {
  _has_bits_[0] |= 0x00000002u;
}
void jitterbufferhead::clear_has_iconv() {
  _has_bits_[0] &= ~0x00000002u;
}
void jitterbufferhead::clear_iconv() {
  iconv_ = 0;
  clear_has_iconv();
}
 ::youmecommon::protobuf::int32 jitterbufferhead::iconv() const {
  // @@protoc_insertion_point(field_get:youmecommon.jitterbufferhead.iConv)
  return iconv_;
}
 void jitterbufferhead::set_iconv(::youmecommon::protobuf::int32 value) {
  set_has_iconv();
  iconv_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.jitterbufferhead.iConv)
}

// required int32 iPacketSerial = 3;
bool jitterbufferhead::has_ipacketserial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void jitterbufferhead::set_has_ipacketserial() {
  _has_bits_[0] |= 0x00000004u;
}
void jitterbufferhead::clear_has_ipacketserial() {
  _has_bits_[0] &= ~0x00000004u;
}
void jitterbufferhead::clear_ipacketserial() {
  ipacketserial_ = 0;
  clear_has_ipacketserial();
}
 ::youmecommon::protobuf::int32 jitterbufferhead::ipacketserial() const {
  // @@protoc_insertion_point(field_get:youmecommon.jitterbufferhead.iPacketSerial)
  return ipacketserial_;
}
 void jitterbufferhead::set_ipacketserial(::youmecommon::protobuf::int32 value) {
  set_has_ipacketserial();
  ipacketserial_ = value;
  // @@protoc_insertion_point(field_set:youmecommon.jitterbufferhead.iPacketSerial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int jitterbufferpacket::kComheadFieldNumber;
const int jitterbufferpacket::kHeadFieldNumber;
const int jitterbufferpacket::kPayloadFieldNumber;
#endif  // !_MSC_VER

jitterbufferpacket::jitterbufferpacket()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youmecommon.jitterbufferpacket)
}

void jitterbufferpacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comhead_ = const_cast< ::youmecommon::commonhead*>(
      ::youmecommon::commonhead::internal_default_instance());
#else
  comhead_ = const_cast< ::youmecommon::commonhead*>(&::youmecommon::commonhead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::youmecommon::jitterbufferhead*>(
      ::youmecommon::jitterbufferhead::internal_default_instance());
#else
  head_ = const_cast< ::youmecommon::jitterbufferhead*>(&::youmecommon::jitterbufferhead::default_instance());
#endif
}

jitterbufferpacket::jitterbufferpacket(const jitterbufferpacket& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youmecommon.jitterbufferpacket)
}

void jitterbufferpacket::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  comhead_ = NULL;
  head_ = NULL;
  payload_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jitterbufferpacket::~jitterbufferpacket() {
  // @@protoc_insertion_point(destructor:youmecommon.jitterbufferpacket)
  SharedDtor();
}

void jitterbufferpacket::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comhead_;
    delete head_;
  }
}

void jitterbufferpacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const jitterbufferpacket& jitterbufferpacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fec_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fec_2eproto();
#endif
  return *default_instance_;
}

jitterbufferpacket* jitterbufferpacket::default_instance_ = NULL;

jitterbufferpacket* jitterbufferpacket::New(::youmecommon::protobuf::Arena* arena) const {
  jitterbufferpacket* n = new jitterbufferpacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void jitterbufferpacket::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_comhead()) {
      if (comhead_ != NULL) comhead_->::youmecommon::commonhead::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::youmecommon::jitterbufferhead::Clear();
    }
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool jitterbufferpacket::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:youmecommon.jitterbufferpacket)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .youmecommon.commonhead comhead = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comhead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_head;
        break;
      }

      // required .youmecommon.jitterbufferhead head = 2;
      case 2: {
        if (tag == 18) {
         parse_head:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // required bytes payload = 3;
      case 3: {
        if (tag == 26) {
         parse_payload:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youmecommon.jitterbufferpacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youmecommon.jitterbufferpacket)
  return false;
#undef DO_
}

void jitterbufferpacket::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youmecommon.jitterbufferpacket)
  // required .youmecommon.commonhead comhead = 1;
  if (has_comhead()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->comhead_, output);
  }

  // required .youmecommon.jitterbufferhead head = 2;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->head_, output);
  }

  // required bytes payload = 3;
  if (has_payload()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:youmecommon.jitterbufferpacket)
}

int jitterbufferpacket::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_comhead()) {
    // required .youmecommon.commonhead comhead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comhead_);
  }

  if (has_head()) {
    // required .youmecommon.jitterbufferhead head = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_payload()) {
    // required bytes payload = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  return total_size;
}
int jitterbufferpacket::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .youmecommon.commonhead comhead = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comhead_);

    // required .youmecommon.jitterbufferhead head = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required bytes payload = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jitterbufferpacket::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const jitterbufferpacket*>(&from));
}

void jitterbufferpacket::MergeFrom(const jitterbufferpacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comhead()) {
      mutable_comhead()->::youmecommon::commonhead::MergeFrom(from.comhead());
    }
    if (from.has_head()) {
      mutable_head()->::youmecommon::jitterbufferhead::MergeFrom(from.head());
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void jitterbufferpacket::CopyFrom(const jitterbufferpacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jitterbufferpacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_comhead()) {
    if (!this->comhead_->IsInitialized()) return false;
  }
  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void jitterbufferpacket::Swap(jitterbufferpacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void jitterbufferpacket::InternalSwap(jitterbufferpacket* other) {
  std::swap(comhead_, other->comhead_);
  std::swap(head_, other->head_);
  payload_.Swap(&other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string jitterbufferpacket::GetTypeName() const {
  return "youmecommon.jitterbufferpacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// jitterbufferpacket

// required .youmecommon.commonhead comhead = 1;
bool jitterbufferpacket::has_comhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void jitterbufferpacket::set_has_comhead() {
  _has_bits_[0] |= 0x00000001u;
}
void jitterbufferpacket::clear_has_comhead() {
  _has_bits_[0] &= ~0x00000001u;
}
void jitterbufferpacket::clear_comhead() {
  if (comhead_ != NULL) comhead_->::youmecommon::commonhead::Clear();
  clear_has_comhead();
}
const ::youmecommon::commonhead& jitterbufferpacket::comhead() const {
  // @@protoc_insertion_point(field_get:youmecommon.jitterbufferpacket.comhead)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return comhead_ != NULL ? *comhead_ : *default_instance().comhead_;
#else
  return comhead_ != NULL ? *comhead_ : *default_instance_->comhead_;
#endif
}
::youmecommon::commonhead* jitterbufferpacket::mutable_comhead() {
  set_has_comhead();
  if (comhead_ == NULL) {
    comhead_ = new ::youmecommon::commonhead;
  }
  // @@protoc_insertion_point(field_mutable:youmecommon.jitterbufferpacket.comhead)
  return comhead_;
}
::youmecommon::commonhead* jitterbufferpacket::release_comhead() {
  clear_has_comhead();
  ::youmecommon::commonhead* temp = comhead_;
  comhead_ = NULL;
  return temp;
}
void jitterbufferpacket::set_allocated_comhead(::youmecommon::commonhead* comhead) {
  delete comhead_;
  comhead_ = comhead;
  if (comhead) {
    set_has_comhead();
  } else {
    clear_has_comhead();
  }
  // @@protoc_insertion_point(field_set_allocated:youmecommon.jitterbufferpacket.comhead)
}

// required .youmecommon.jitterbufferhead head = 2;
bool jitterbufferpacket::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void jitterbufferpacket::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
void jitterbufferpacket::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
void jitterbufferpacket::clear_head() {
  if (head_ != NULL) head_->::youmecommon::jitterbufferhead::Clear();
  clear_has_head();
}
const ::youmecommon::jitterbufferhead& jitterbufferpacket::head() const {
  // @@protoc_insertion_point(field_get:youmecommon.jitterbufferpacket.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::youmecommon::jitterbufferhead* jitterbufferpacket::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::youmecommon::jitterbufferhead;
  }
  // @@protoc_insertion_point(field_mutable:youmecommon.jitterbufferpacket.head)
  return head_;
}
::youmecommon::jitterbufferhead* jitterbufferpacket::release_head() {
  clear_has_head();
  ::youmecommon::jitterbufferhead* temp = head_;
  head_ = NULL;
  return temp;
}
void jitterbufferpacket::set_allocated_head(::youmecommon::jitterbufferhead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:youmecommon.jitterbufferpacket.head)
}

// required bytes payload = 3;
bool jitterbufferpacket::has_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void jitterbufferpacket::set_has_payload() {
  _has_bits_[0] |= 0x00000004u;
}
void jitterbufferpacket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
void jitterbufferpacket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
 const ::std::string& jitterbufferpacket::payload() const {
  // @@protoc_insertion_point(field_get:youmecommon.jitterbufferpacket.payload)
  return payload_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void jitterbufferpacket::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:youmecommon.jitterbufferpacket.payload)
}
 void jitterbufferpacket::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:youmecommon.jitterbufferpacket.payload)
}
 void jitterbufferpacket::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:youmecommon.jitterbufferpacket.payload)
}
 ::std::string* jitterbufferpacket::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:youmecommon.jitterbufferpacket.payload)
  return payload_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* jitterbufferpacket::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void jitterbufferpacket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:youmecommon.jitterbufferpacket.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace youmecommon

// @@protoc_insertion_point(global_scope)
